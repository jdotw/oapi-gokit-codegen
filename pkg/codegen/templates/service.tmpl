{{$tag := .Tag}}
{{$tagVar := .TagCamel}}
{{$tagPkg := .Package}}
type Service interface {
{{range .Ops}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$opid := .OperationId -}}
{{$successResponse := getSuccessResponseTypeDefinition .}}
{{$opid}}(ctx context.Context{{genParamArgs .PathParams}}{{range .Bodies}}, {{lcFirst .Schema.GoType}} *{{.Schema.GoType}}{{end}}) ({{if $successResponse}}*{{$successResponse.Schema.GoType}}, {{end}}error){{end}}
}

type service struct {
	repository Repository
}

func NewService(repository Repository, logger log.Factory, tracer opentracing.Tracer) Service {
	var svc Service
	{
		svc = &service{
			repository: repository,
		}
	}
	return svc
}

{{range .Ops}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$opid := .OperationId -}}
{{$successResponse := getSuccessResponseTypeDefinition .}}
{{$tag := .Tag -}}
  func (f *service) {{$opid}}(ctx context.Context{{genParamArgs .PathParams}}{{range .Bodies}}, {{lcFirst .Schema.GoType}} *{{.Schema.GoType}}{{end}}) ({{if $successResponse}}*{{$successResponse.Schema.GoType}}, {{end}}error) {
    v, err := f.repository.{{$opid}}(ctx{{genParamNames .PathParams}}{{range .Bodies}}, {{lcFirst .Schema.GoType}}{{end}})
    return v, err
  }
{{end}}
